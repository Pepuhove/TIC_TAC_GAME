name: Deploy tic-tac-toe game

on:
  push:
    branches:
      - main

jobs:
  call-terraform:
    uses: ./.github/workflows/terraform.yml
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

  sonar:
    name: üîç SonarQube Code Analysis
    runs-on: ubuntu-latest
    needs: call-terraform
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: üö® Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  nodejs:
    name: ‚öôÔ∏è Node.js Setup and Tests
    runs-on: ubuntu-latest
    needs: sonar
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: npm install
      # - run: npm test

  docker-build-and-push:
    name: üê≥ Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [sonar, nodejs]
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v3

      - name: üîê Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: üîê Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin \
          ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: üèóÔ∏è Build, Tag, and Push Docker Image
        env:
          REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          REPOSITORY: ${{ secrets.REPOSITORY }}
          IMAGE_TAG: ${{ secrets.IMAGE_TAG }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  trivy:
    name: üõ°Ô∏è Trivy Vulnerability Scan
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v3

      - name: üîê Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: üîê Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin \
          ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: üì• Pull ECR Image
        run: |
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.REPOSITORY }}:${{ secrets.IMAGE_TAG }}

      - name: üîç Run Trivy Scan
        run: |
          trivy image \
            --format json \
            --output trivy-image-report.json \
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.REPOSITORY }}:${{ secrets.IMAGE_TAG }}

      - name: üì§ Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image-report
          path: trivy-image-report.json

  deploy:
    name: üöÄ Deploy to ECS
    runs-on: ubuntu-latest
    needs: trivy
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v3

      - name: üîê Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: üîê Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: üö¢ Deploy Image to ECS
        uses: jaroldwong/ecr-push-and-ecs-deploy@v1.1
        with:
          ecr-registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          ecr-repository: ${{ secrets.REPOSITORY }}
          ecs-cluster: ${{ secrets.ECS_CLUSTER }}
          ecs-service: ${{ secrets.ECS_SERVICE }}
# 
# 